package com.rxlogix.dynamicReports

import com.rxlogix.Constants
import com.rxlogix.enums.ReportFormat
import net.sf.dynamicreports.jasper.builder.JasperReportBuilder
import net.sf.dynamicreports.report.builder.column.Columns
import net.sf.dynamicreports.report.builder.component.HorizontalListBuilder
import net.sf.dynamicreports.report.builder.component.ImageBuilder
import net.sf.dynamicreports.report.builder.component.VerticalListBuilder
import net.sf.dynamicreports.report.constant.HorizontalAlignment
import net.sf.dynamicreports.report.constant.PageOrientation
import net.sf.dynamicreports.report.constant.PageType
import net.sf.jasperreports.engine.JRDataSource

import static net.sf.dynamicreports.report.builder.DynamicReports.cmp
import static net.sf.dynamicreports.report.builder.DynamicReports.stl
import static net.sf.dynamicreports.report.builder.DynamicReports.stl
import static net.sf.dynamicreports.report.builder.DynamicReports.type


class ProductAssignmentReportBuilder extends ReportBuilder{
    void createReport(JRDataSource dataSource, Map params, ArrayList<JasperReportBuilderEntry> jasperReportBuilderEntryList,Map criteriaInfo) {
        if (dynamicReportService.isInPrintMode(params)) {
            JasperReportBuilder criteriaPage =createCriteria(criteriaInfo,params)
            JasperReportBuilderEntry jasperSignalSummary = new JasperReportBuilderEntry()
            jasperSignalSummary.jasperReportBuilder = criteriaPage
            jasperSignalSummary.excelSheetName = "Product Assignment Criteria"
            jasperReportBuilderEntryList.add(jasperSignalSummary)

            JasperReportBuilder reportSheet = buildReport(dataSource, params)
            JasperReportBuilderEntry jasperReportBuilderEntry = new JasperReportBuilderEntry()
            jasperReportBuilderEntry.jasperReportBuilder = reportSheet
            jasperReportBuilderEntry.excelSheetName = customMessageService.getMessage("jasperReports.${getClass().getSimpleName()}.title")
            jasperReportBuilderEntryList.add(jasperReportBuilderEntry)
        }
    }

    def createCriteria(Map criteriaInfo, Map params){
        VerticalListBuilder verticalList = cmp.verticalList()
        HorizontalListBuilder signalSummaryList = cmp.horizontalList()
        ImageBuilder img = cmp.image(imageService.getImage(Constants.DynamicReports.COMPANY_LOGO))
                .setFixedDimension(80, 36).setStyle(stl.style().setHorizontalAlignment(HorizontalAlignment.LEFT).setTopPadding(5))
        signalSummaryList.add(cmp.verticalList(img)).newRow()
        signalSummaryList.add(cmp.text("Criteria Sheet").setStyle(Templates.pageHeader_TitleStyle)).newRow()
        def filler = cmp.filler().setStyle(stl.style().setTopBorder(stl.penDouble())).setFixedHeight(1)
        signalSummaryList.add(cmp.verticalList(filler))

        String filterString =""
        if(criteriaInfo.isFilter != "true"){
            filterString = Constants.Commons.NA_LISTED
        } else {
            criteriaInfo.filterMap.each{
                if(it.value) {
                    filterString += "${it.key}: ${it.value}\n"
                }
            }
        }

        addSignalSummaryHeaderTable(signalSummaryList, 'Report Generated By', criteriaInfo.generatedBy)
        addSignalSummaryHeaderTable(signalSummaryList, 'Exported Date', criteriaInfo.dateCreated)
        addSignalSummaryHeaderTable(signalSummaryList, 'Filters', filterString)
        addCriteriaHeaderNote(signalSummaryList, Constants.CriteriaSheetLabels.IMPORT_SHEET_NOTE)
        verticalList.add(cmp.verticalGap(10))
        verticalList.add(cmp.verticalList(signalSummaryList))
        verticalList.add(cmp.verticalGap(10))

        HorizontalListBuilder signalSummaryText = cmp.horizontalList()

        verticalList.add(cmp.verticalGap(5))
        verticalList.add(cmp.verticalList(signalSummaryText))
        verticalList.add(cmp.verticalGap(5))
        JasperReportBuilder signalDataReport = ReportBuilder.initializeNewReport(true,true,false,(params.outputFormat == ReportFormat.XLSX.name()), PageType.LEDGER, PageOrientation.LANDSCAPE)
        JasperReportBuilder report = signalDataReport.summary(verticalList)
        report.setPageFormat(PageType.LEDGER, PageOrientation.LANDSCAPE)
        report
    }

    private void addSignalSummaryHeaderTable(HorizontalListBuilder list, def labelId, def value) {
        if (value instanceof List) {
            value = value.join(',')
        }
        list.add(
                cmp.text(labelId).setFixedColumns(15).setStyle(Templates.criteriaNameStyle),
                cmp.text(value).setValueFormatter(new CSVFormulaFormatter()).setStyle(Templates.criteriaValueStyle)
        ).newRow()
    }

    private void addCriteriaHeaderNote(HorizontalListBuilder list, def labelId) {

        list.add(
                cmp.text(labelId).setFixedColumns(30).setStyle(Templates.criteriaNoteStyle),
        ).newRow()

    }

    @Override
    protected void addColumns(JasperReportBuilder report, Map params) {
        if(params.isProductView == "true") {
            report.addColumn(Columns.column("Product", "product", type.stringType()))
            report.addColumn(Columns.column("Product Hierarchy", "hierarchy", type.stringType()))
            report.addColumn(Columns.column("Assignment", "assignments", type.stringType()))
            report.addColumn(Columns.column("User Id", "userId", type.stringType()))
            report.addColumn(Columns.column("Workflow Group", "workflowGroup", type.stringType()))
            report.addColumn(Columns.column("Created Date", "dateCreated", type.stringType()))
            report.addColumn(Columns.column("Last Modified", "lastUpdated", type.stringType()))
        } else {
            report.addColumn(Columns.column("Assignment", "assignments", type.stringType()))
            report.addColumn(Columns.column("Product", "product", type.stringType()))
            report.addColumn(Columns.column("Product Hierarchy", "hierarchy", type.stringType()))
            report.addColumn(Columns.column("User Id", "userId", type.stringType()))
            report.addColumn(Columns.column("Workflow Group", "workflowGroup", type.stringType()))
            report.addColumn(Columns.column("Created Date", "dateCreated", type.stringType()))
            report.addColumn(Columns.column("Last Modified", "lastUpdated", type.stringType()))
        }
    }

    @Override
    protected String getReportHeader(Map params) {
        return customMessageService.getMessage("jasperReports.${getClass().getSimpleName()}.title")
    }

    @Override
    protected PageType getPageType() {
        return PageType.LEDGER
    }

    @Override
    protected PageOrientation getPageOrientation() {
        return PageOrientation.LANDSCAPE
    }
}
