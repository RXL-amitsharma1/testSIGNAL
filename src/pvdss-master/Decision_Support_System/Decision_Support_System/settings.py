"""
Django settings for Decision_Support_System project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""


import os
# For LDAP Authentication
import ldap
from datetime import datetime
from django_auth_ldap.config import LDAPSearch
from . import config
import ast

# Baseline configuration.
# AUTH_LDAP_SERVER_URI = config.config['LDAP']['AUTH_LDAP_SERVER_URI']
# AUTH_LDAP_BIND_AS_AUTHENTICATING_USER = config.config['LDAP']['AUTH_LDAP_BIND_AS_AUTHENTICATING_USER']

# AUTH_DC = config.config['LDAP']['AUTH_DC']

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.config['DJANGO_KEY']['KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
CSRF_COOKIE_SECURE = True

ALLOWED_HOSTS = ast.literal_eval(config.config['ALLOWED_HOSTS']['ALLOWED_HOSTS_NAME'])

# Distinguished name of User
AUTH_LDAP_BIND_DN = config.config['LDAP']['AUTH_LDAP_BIND_DN']
AUTH_LDAP_BIND_PASSWORD = config.config['LDAP']['AUTH_LDAP_BIND_PASSWORD']
LDAP_DISPLAY_PROPERTY = config.config['LDAP']['LDAP_DISPLAY_PROPERTY']
LDAP_USERNAME_MAPPING = config.config['LDAP']['LDAP_USERNAME_MAPPING']

AUTH_LDAP_USER_SEARCH = LDAPSearch(
    config.config['LDAP']['LDAP_SEARCH_DN'], ldap.SCOPE_SUBTREE,  config.config['LDAP']['LDAP_USER_FILTER']
)

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "cn": "cn",
    "email": "mail",
}

# Keep ModelBackend around for per-user permissions and maybe a local superuser.
AUTHENTICATION_BACKENDS = (
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
)


# Application definition
INSTALLED_APPS = [
    'DSS.apps.DssConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Decision_Support_System.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, 'DSS', 'templates'),
                 os.path.join(BASE_DIR, 'DSS', 'templates', 'DSS'),
                ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Decision_Support_System.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
APP_ENGINE = config.config['APP_DATABASE_SECTION']['ENGINE']
APP_NAME = config.config['APP_DATABASE_SECTION']['NAME']
APP_User = config.config['APP_DATABASE_SECTION']['USER']
APP_Password = config.config['APP_DATABASE_SECTION']['PASSWORD']
APP_Host = config.config['APP_DATABASE_SECTION']['HOST']
APP_Port = config.config['APP_DATABASE_SECTION']['PORT']

MART_ENGINE = config.config['MART_DATABASE_SECTION']['ENGINE']
MART_Name = config.config['MART_DATABASE_SECTION']['NAME']
MART_User = config.config['MART_DATABASE_SECTION']['USER']
MART_Password = config.config['MART_DATABASE_SECTION']['PASSWORD']
MART_Host = config.config['MART_DATABASE_SECTION']['HOST']
MART_Port = config.config['MART_DATABASE_SECTION']['PORT']

DATABASES = {
    # application DB would be the default DB
    'default': {
        'ENGINE': APP_ENGINE,
        'NAME': APP_NAME,
        'USER': APP_User,
        'PASSWORD': APP_Password,
        'HOST': APP_Host,
        'PORT': APP_Port,

    },
    # Mart DB for evidence
    'pva': {
        'ENGINE': MART_ENGINE,
        'NAME': MART_Name,
        'USER': MART_User,
        'PASSWORD': MART_Password,
        'HOST': MART_Host,
        'PORT': MART_Port,
    }
    
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")


# All the configurable files are stored in DSS/static/config
HOME_DIR = os.path.expanduser("~")
CONFIG_FILES = os.path.join(HOME_DIR, '.Decision_Support_System/config')
if os.path.exists(CONFIG_FILES):
    CONFIG_FILES = os.path.join(HOME_DIR, '.Decision_Support_System/config')
else:
    CONFIG_FILES = os.path.join(BASE_DIR, 'DSS/static/DSS/config')

LOGIN_URL = 'login'

SAML_FOLDER = os.path.join(CONFIG_FILES, 'saml')
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 900
SESSION_SAVE_EVERY_REQUEST = True

LOGOUT_REDIRECT = config.config['SSO']['APP_LOGOUT_LINK']
SSO_FLAG = config.config['SSO']['SSO_FLAG']
HTTPS = config.config['SSO']['HTTPS']
SERVER_PORT = config.config['SSO']['SERVER_PORT']

logs_dir_path = os.path.join(BASE_DIR, "logs")
os.makedirs(logs_dir_path, exist_ok=True)

# change level to INFO and handlers to file in the mapping below
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(name)-12s %(levelname)-8s %(message)s'
        },
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': logs_dir_path + '/DSS_logs_{:%Y-%m-%d}.log'.format(datetime.now())
        }
    },
    'loggers': {
        '': {
            'level': 'INFO',
            'handlers': ['file']
        }
    }
}

PARTITION_SIZE = int(config.config["SYSTEM_PROPERTIES"]["PARTITION_SIZE"])
CPU = int(config.config["SYSTEM_PROPERTIES"]["CPU"])
WORKERS = int(config.config["SYSTEM_PROPERTIES"]["WORKERS"])
APP_VERSION = config.config["SYSTEM_PROPERTIES"]["APP_VERSION"]
OUTPUT_DIR = config.config["DIRS"]["OUTPUT_DIR"]
OUTPUT_FILENAME = config.config["OUTPUT_FILENAME"]["OUTPUT_FILENAME"]
DEACTIVATED_NODES = ast.literal_eval(config.config["DEACTIVATE_NODE"]["DEACTIVATED_NODES"])
ALERT_ROWS = int(config.config["PREFERED_CHUNKSIZE"]["ALERT_ROWS"])
DB_ROWS = int(config.config["PREFERED_CHUNKSIZE"]["DB_ROWS"])
TREND_COLUMNS = ast.literal_eval(config.config["TREND_COLUMNS"]["TREND_COLUMNS"])

# calculating CORES_PER_ALERT value
if  config.config["SYSTEM_PROPERTIES"]["USE_DEFAULT_CORES"].lower() == "true":
    import math
    config.config.set("SYSTEM_PROPERTIES", "CORES_PER_ALERT", f"{math.ceil(float(CPU)/WORKERS)}")
CORES_PER_ALERT = int(config.config["SYSTEM_PROPERTIES"]["CORES_PER_ALERT"])